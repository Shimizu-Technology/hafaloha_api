<%# app/views/admin/tenant_backup/index.html.erb %>
<div class="container mx-auto px-4 py-6">
  <h1 class="text-2xl font-bold mb-6">Tenant Backup & Disaster Recovery</h1>
  
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- Backup Operations -->
    <div class="bg-white rounded-lg shadow p-6">
      <h2 class="text-xl font-semibold mb-4">Backup Operations</h2>
      
      <div class="mb-6">
        <h3 class="text-lg font-medium mb-2">Export Tenant</h3>
        <p class="text-gray-600 mb-4">Create a backup of a tenant's data for disaster recovery or migration.</p>
        
        <form id="export-form" class="space-y-4">
          <div>
            <label for="export-tenant" class="block text-sm font-medium text-gray-700">Select Tenant</label>
            <select id="export-tenant" name="restaurant_id" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
              <option value="">Select a restaurant</option>
              <% Restaurant.order(:name).each do |restaurant| %>
                <option value="<%= restaurant.id %>"><%= restaurant.name %></option>
              <% end %>
            </select>
          </div>
          
          <div class="flex items-start">
            <div class="flex items-center h-5">
              <input id="include-empty-tables" name="include_empty_tables" type="checkbox" class="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded">
            </div>
            <div class="ml-3 text-sm">
              <label for="include-empty-tables" class="font-medium text-gray-700">Include Empty Tables</label>
              <p class="text-gray-500">Export tables even if they contain no data for this tenant.</p>
            </div>
          </div>
          
          <div>
            <button type="button" id="export-button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Export Tenant
            </button>
          </div>
        </form>
      </div>
      
      <div>
        <h3 class="text-lg font-medium mb-2">Clone Tenant</h3>
        <p class="text-gray-600 mb-4">Create a new tenant with data copied from an existing tenant.</p>
        
        <form id="clone-form" class="space-y-4">
          <div>
            <label for="source-tenant" class="block text-sm font-medium text-gray-700">Source Tenant</label>
            <select id="source-tenant" name="source_restaurant_id" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
              <option value="">Select a restaurant</option>
              <% Restaurant.order(:name).each do |restaurant| %>
                <option value="<%= restaurant.id %>"><%= restaurant.name %></option>
              <% end %>
            </select>
          </div>
          
          <div>
            <label for="new-tenant-name" class="block text-sm font-medium text-gray-700">New Tenant Name</label>
            <input type="text" name="new_restaurant_name" id="new-tenant-name" class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md">
          </div>
          
          <div class="flex items-start">
            <div class="flex items-center h-5">
              <input id="activate-restaurant" name="activate_restaurant" type="checkbox" class="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded">
            </div>
            <div class="ml-3 text-sm">
              <label for="activate-restaurant" class="font-medium text-gray-700">Activate Restaurant</label>
              <p class="text-gray-500">Make the new restaurant active immediately.</p>
            </div>
          </div>
          
          <div>
            <button type="button" id="clone-button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Clone Tenant
            </button>
          </div>
        </form>
      </div>
    </div>
    
    <!-- Restore Operations -->
    <div class="bg-white rounded-lg shadow p-6">
      <h2 class="text-xl font-semibold mb-4">Restore Operations</h2>
      
      <div class="mb-6">
        <h3 class="text-lg font-medium mb-2">Import Tenant</h3>
        <p class="text-gray-600 mb-4">Restore a tenant from a backup file.</p>
        
        <form id="import-form" class="space-y-4">
          <div>
            <label for="backup-select" class="block text-sm font-medium text-gray-700">Select Backup</label>
            <select id="backup-select" name="backup_id" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
              <option value="">Select a backup</option>
              <!-- Will be populated via JavaScript -->
            </select>
          </div>
          
          <div>
            <label for="target-tenant" class="block text-sm font-medium text-gray-700">Target Tenant (Optional)</label>
            <select id="target-tenant" name="target_restaurant_id" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
              <option value="">Create new tenant from backup</option>
              <% Restaurant.order(:name).each do |restaurant| %>
                <option value="<%= restaurant.id %>"><%= restaurant.name %></option>
              <% end %>
            </select>
            <p class="mt-1 text-sm text-gray-500">Leave empty to create a new tenant from the backup.</p>
          </div>
          
          <div>
            <label for="new-restaurant-name" class="block text-sm font-medium text-gray-700">New Restaurant Name (Optional)</label>
            <input type="text" name="new_restaurant_name" id="new-restaurant-name" class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md">
            <p class="mt-1 text-sm text-gray-500">Only used when creating a new tenant.</p>
          </div>
          
          <div class="flex items-start">
            <div class="flex items-center h-5">
              <input id="clear-existing-data" name="clear_existing_data" type="checkbox" class="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded">
            </div>
            <div class="ml-3 text-sm">
              <label for="clear-existing-data" class="font-medium text-gray-700">Clear Existing Data</label>
              <p class="text-gray-500">Remove all existing data from the target tenant before importing.</p>
            </div>
          </div>
          
          <div class="flex items-start">
            <div class="flex items-center h-5">
              <input id="update-existing" name="update_existing" type="checkbox" class="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded">
            </div>
            <div class="ml-3 text-sm">
              <label for="update-existing" class="font-medium text-gray-700">Update Existing Records</label>
              <p class="text-gray-500">Update existing records instead of creating duplicates.</p>
            </div>
          </div>
          
          <div>
            <button type="button" id="import-button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Import Tenant
            </button>
          </div>
        </form>
      </div>
      
      <div>
        <h3 class="text-lg font-medium mb-2">Migrate Tenant</h3>
        <p class="text-gray-600 mb-4">Migrate a tenant to another environment.</p>
        
        <form id="migrate-form" class="space-y-4">
          <div>
            <label for="migrate-backup-select" class="block text-sm font-medium text-gray-700">Select Backup</label>
            <select id="migrate-backup-select" name="backup_id" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
              <option value="">Select a backup</option>
              <!-- Will be populated via JavaScript -->
            </select>
          </div>
          
          <div>
            <label for="target-environment" class="block text-sm font-medium text-gray-700">Target Environment</label>
            <select id="target-environment" name="target_environment" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
              <option value="">Select an environment</option>
              <option value="staging">Staging</option>
              <option value="production">Production</option>
            </select>
          </div>
          
          <div>
            <button type="button" id="migrate-button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Migrate Tenant
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <!-- Available Backups -->
  <div class="mt-8 bg-white rounded-lg shadow overflow-hidden">
    <div class="px-6 py-4 border-b border-gray-200">
      <h2 class="text-xl font-semibold">Available Backups</h2>
    </div>
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Backup ID</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Restaurant</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created At</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody id="backups-table-body" class="bg-white divide-y divide-gray-200">
          <!-- Will be populated via JavaScript -->
          <tr>
            <td colspan="5" class="px-6 py-4 text-center text-gray-500">Loading backups...</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
  
  <!-- Job Status -->
  <div id="job-status-container" class="mt-8 hidden">
    <div class="bg-white rounded-lg shadow p-6">
      <h2 class="text-xl font-semibold mb-4">Job Status</h2>
      <div id="job-status-content">
        <div class="flex items-center">
          <div class="mr-4">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
          </div>
          <div>
            <p id="job-status-message" class="text-lg font-medium">Processing...</p>
            <div class="mt-2 w-full bg-gray-200 rounded-full h-2.5">
              <div id="job-status-progress" class="bg-indigo-600 h-2.5 rounded-full" style="width: 0%"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Load backups on page load
    loadBackups();
    
    // Set up event listeners
    document.getElementById('export-button').addEventListener('click', exportTenant);
    document.getElementById('clone-button').addEventListener('click', cloneTenant);
    document.getElementById('import-button').addEventListener('click', importTenant);
    document.getElementById('migrate-button').addEventListener('click', migrateTenant);
    
    // Refresh backups every 30 seconds
    setInterval(loadBackups, 30000);
  });
  
  // Load available backups
  function loadBackups() {
    fetch('/admin/tenant_backup/backups')
      .then(response => response.json())
      .then(data => {
        updateBackupsTable(data.backups);
        updateBackupSelects(data.backups);
      })
      .catch(error => console.error('Error loading backups:', error));
  }
  
  // Update the backups table
  function updateBackupsTable(backups) {
    const tableBody = document.getElementById('backups-table-body');
    
    if (backups.length === 0) {
      tableBody.innerHTML = '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">No backups available</td></tr>';
      return;
    }
    
    tableBody.innerHTML = backups.map(backup => `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${backup.id}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${backup.restaurant_name}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(backup.created_at).toLocaleString()}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatBytes(backup.size)}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <button onclick="validateBackup('${backup.id}')" class="text-indigo-600 hover:text-indigo-900 mr-2">Validate</button>
          <button onclick="deleteBackup('${backup.id}')" class="text-red-600 hover:text-red-900">Delete</button>
        </td>
      </tr>
    `).join('');
  }
  
  // Update backup select dropdowns
  function updateBackupSelects(backups) {
    const backupSelect = document.getElementById('backup-select');
    const migrateBackupSelect = document.getElementById('migrate-backup-select');
    
    // Clear existing options except the first one
    while (backupSelect.options.length > 1) {
      backupSelect.remove(1);
    }
    
    while (migrateBackupSelect.options.length > 1) {
      migrateBackupSelect.remove(1);
    }
    
    // Add new options
    backups.forEach(backup => {
      const option = new Option(`${backup.restaurant_name} (${new Date(backup.created_at).toLocaleString()})`, backup.id);
      const migrateOption = new Option(`${backup.restaurant_name} (${new Date(backup.created_at).toLocaleString()})`, backup.id);
      
      backupSelect.add(option);
      migrateBackupSelect.add(migrateOption);
    });
  }
  
  // Export tenant
  function exportTenant() {
    const restaurantId = document.getElementById('export-tenant').value;
    
    if (!restaurantId) {
      alert('Please select a restaurant to export');
      return;
    }
    
    const includeEmptyTables = document.getElementById('include-empty-tables').checked;
    
    // Show job status
    showJobStatus('Starting export...');
    
    // Send export request
    fetch(`/admin/tenant_backup/export_tenant/${restaurantId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ include_empty_tables: includeEmptyTables })
    })
    .then(response => response.json())
    .then(data => {
      if (data.error) {
        alert(`Error: ${data.error}`);
        hideJobStatus();
      } else {
        // Start polling for job status
        pollJobStatus(data.job_id);
      }
    })
    .catch(error => {
      console.error('Error exporting tenant:', error);
      alert('An error occurred while exporting the tenant');
      hideJobStatus();
    });
  }
  
  // Clone tenant
  function cloneTenant() {
    const sourceRestaurantId = document.getElementById('source-tenant').value;
    const newRestaurantName = document.getElementById('new-tenant-name').value;
    
    if (!sourceRestaurantId) {
      alert('Please select a source restaurant');
      return;
    }
    
    if (!newRestaurantName) {
      alert('Please enter a name for the new restaurant');
      return;
    }
    
    const activateRestaurant = document.getElementById('activate-restaurant').checked;
    
    // Show job status
    showJobStatus('Starting clone operation...');
    
    // Send clone request
    fetch('/admin/tenant_backup/clone_tenant', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        source_restaurant_id: sourceRestaurantId,
        new_restaurant_name: newRestaurantName,
        activate_restaurant: activateRestaurant
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.error) {
        alert(`Error: ${data.error}`);
        hideJobStatus();
      } else {
        // Start polling for job status
        pollJobStatus(data.job_id);
      }
    })
    .catch(error => {
      console.error('Error cloning tenant:', error);
      alert('An error occurred while cloning the tenant');
      hideJobStatus();
    });
  }
  
  // Import tenant
  function importTenant() {
    const backupId = document.getElementById('backup-select').value;
    
    if (!backupId) {
      alert('Please select a backup to import');
      return;
    }
    
    const targetRestaurantId = document.getElementById('target-tenant').value;
    const newRestaurantName = document.getElementById('new-restaurant-name').value;
    const clearExistingData = document.getElementById('clear-existing-data').checked;
    const updateExisting = document.getElementById('update-existing').checked;
    
    // Show job status
    showJobStatus('Starting import...');
    
    // Send import request
    fetch('/admin/tenant_backup/import_tenant', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        backup_id: backupId,
        target_restaurant_id: targetRestaurantId,
        new_restaurant_name: newRestaurantName,
        clear_existing_data: clearExistingData,
        update_existing: updateExisting
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.error) {
        alert(`Error: ${data.error}`);
        hideJobStatus();
      } else {
        // Start polling for job status
        pollJobStatus(data.job_id);
      }
    })
    .catch(error => {
      console.error('Error importing tenant:', error);
      alert('An error occurred while importing the tenant');
      hideJobStatus();
    });
  }
  
  // Migrate tenant
  function migrateTenant() {
    const backupId = document.getElementById('migrate-backup-select').value;
    const targetEnvironment = document.getElementById('target-environment').value;
    
    if (!backupId) {
      alert('Please select a backup to migrate');
      return;
    }
    
    if (!targetEnvironment) {
      alert('Please select a target environment');
      return;
    }
    
    // Show job status
    showJobStatus('Starting migration...');
    
    // Send migrate request
    fetch('/admin/tenant_backup/migrate_tenant', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        backup_id: backupId,
        target_environment: targetEnvironment
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.error) {
        alert(`Error: ${data.error}`);
        hideJobStatus();
      } else {
        // Start polling for job status
        pollJobStatus(data.job_id);
      }
    })
    .catch(error => {
      console.error('Error migrating tenant:', error);
      alert('An error occurred while migrating the tenant');
      hideJobStatus();
    });
  }
  
  // Validate backup
  function validateBackup(backupId) {
    fetch(`/admin/tenant_backup/validate_backup/${backupId}`)
      .then(response => response.json())
      .then(data => {
        if (data.valid) {
          alert(`Backup is valid: ${data.message}`);
        } else {
          alert(`Backup is invalid: ${data.message}`);
        }
      })
      .catch(error => {
        console.error('Error validating backup:', error);
        alert('An error occurred while validating the backup');
      });
  }
  
  // Delete backup
  function deleteBackup(backupId) {
    if (!confirm('Are you sure you want to delete this backup? This action cannot be undone.')) {
      return;
    }
    
    fetch(`/admin/tenant_backup/delete_backup/${backupId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => response.json())
    .then(data => {
      alert(data.message);
      loadBackups();
    })
    .catch(error => {
      console.error('Error deleting backup:', error);
      alert('An error occurred while deleting the backup');
    });
  }
  
  // Poll job status
  function pollJobStatus(jobId) {
    const statusInterval = setInterval(() => {
      fetch(`/admin/tenant_backup/backup_status/${jobId}`)
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            clearInterval(statusInterval);
            alert(`Error: ${data.error}`);
            hideJobStatus();
            return;
          }
          
          // Update status display
          document.getElementById('job-status-message').textContent = data.message || 'Processing...';
          
          if (data.progress) {
            document.getElementById('job-status-progress').style.width = `${data.progress}%`;
          }
          
          // Check if job is complete
          if (data.status === 'complete') {
            clearInterval(statusInterval);
            alert('Operation completed successfully!');
            hideJobStatus();
            loadBackups();
          } else if (data.status === 'failed') {
            clearInterval(statusInterval);
            alert(`Operation failed: ${data.message}`);
            hideJobStatus();
          }
        })
        .catch(error => {
          console.error('Error polling job status:', error);
          // Don't stop polling on network errors
        });
    }, 2000);
  }
  
  // Show job status container
  function showJobStatus(message) {
    const container = document.getElementById('job-status-container');
    container.classList.remove('hidden');
    
    document.getElementById('job-status-message').textContent = message || 'Processing...';
    document.getElementById('job-status-progress').style.width = '0%';
  }
  
  // Hide job status container
  function hideJobStatus() {
    const container = document.getElementById('job-status-container');
    container.classList.add('hidden');
  }
  
  // Format bytes to human-readable size
  function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
  }
</script>
